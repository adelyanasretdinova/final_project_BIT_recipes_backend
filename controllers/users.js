import { validationResult } from "express-validator";
import { v4 as uuidv4 } from "uuid";
import { db } from "../database/setup.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

export const postCreateUserEntry = async (req, res) => {
  const validationErrors = validationResult(req);
  if (!validationErrors.isEmpty()) {
    return res.status(400).json({
      errors: validationErrors.array(),
    });
  }

  let newUser = req.body;
  let newId = uuidv4();
  console.log("id", newId);

  const pwSalt = await bcrypt.genSalt(12);
  const pwHash = await bcrypt.hash(newUser.password, pwSalt);

  // autogenerated salt async, shorter way:
  //let hashPWshort = await bcrypt.hash(user.password, 12)

  console.log("password", pwHash);

  try {
    let newUserInDB = await db.one(
      "INSERT INTO users VALUES(${id}, ${username}, ${email}, ${password}) RETURNING *",
      { ...newUser, id: newId, password: pwHash }
    );

    res.status(201).json({
      success: true,
      message: `${newUserInDB.name} was created`,
      body: newUserInDB,
    });
    console.log("User has been created");
  } catch (error) {
    console.log(error);
    res.status(500).json({
      success: false,
      errors: error.message,
    });
  }
};

export const loginUser = async (req, res) => {
  // {username: "", email: "", password: ""}
  let user = req.body;

  try {
    //get info from db
    let userFromDb = await db.one(
      "SELECT * FROM users WHERE email = $1",
      user.email
    );
    //if no user matchs
    if (userFromDb === null) {
      return res.send(401).json({
        errors: "Could not log in",
      });
    }
    //check password
    let matchPW = await bcrypt.compare(user.password, userFromDb.password);
    if (matchPW) {
      //create token
      let token = jwt.sign(
        {
          username: userFromDb.email,
          id: userFromDb.id,
        },
        "A secret",
        {
          expiresIn: "1h",
        }
      );
      console.log("token", token);
      // send a token to client
      res.status(200).json({
        message: "logged in",
        token: token,
      });
    } else {
      //or no match of password
      res.send(401).json({
        success: false,
        errors: "Could not log in",
      });
    }
  } catch (error) {
    // send error message:
    console.log(error);
    res.send(401).json({
      success: false,
      errors: "Could not log in",
    });
  }
};
